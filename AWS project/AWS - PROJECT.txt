open go daddy 

open DNS >> Forwarding..... add Forwarding

------Subdomains

sub - "buy.viknesh.xyz"
--http://  [buy.viknesh.xyz]

--------------------------------------------------------------
-----Domain

--http://  [viknesh.xyz]

==========================================================
**** Another TYPE

first go to go daddy 

open DNS >> DNS Record 

Add record >>>>> .....Save


========================================================
Now AWS Certificate Manager

give request

---Certificate a public certificate

:Request a public certificate

next
---------

Fully qualified domain name -
[viknesh.xyz]
[buy.viknesh.xyz]

RSA 2048

Give >> Request
======================================

ACM >> certificate manager >> Request
Certificate type request a public certificate 
===================================================
Now go to Amazon R53

Route 53 >> Hosted zones >> Create hosted zone

Domain name -- viknesh.xyz
Description -- viknesh.xyz

Type - Public hosted zone

Next give - Create Hosted Zone
=====================================================
viknesh.xyz was successfully created.

2 Record created NS & SOA

========================================

click NS record copy the 4 Value.......

open Our Domain click nameserver

change name server >> ill use my own nameserver

paste the 4 Value..

#$$
#$$
#$$
#$$

done 
Save and continue
=======================================================
Go ACM open our created certificate

click ---> CREATE RECORDS IN R53 >> Create Record

Create DNS records in Amazon Route 53 (2/2)

Create
==========================================================
Now go to R53 and refresh

you'll find a new 2 record 
2 Record CNAME & CNAME  
==========================================================
Now go to EC2 create 1 security group....

Create a sec group

TCP -80, 443, 3306, 22
============================================================
Now go to RDS

>>go to subnet groups 

Subnet group details

Name: AWS project
Description :AWS project
-----
Availability Zones: select 3 zones...

Subnets:  select 3 subnets...
-----
 {then CREATE}

check subnet created
===========================================================
RDS

create 1

Then go to Database

standard create

engine option: Mysql
engine version: 8.0.35 [enable RDS]

----
Templates: Free tier

Settings:
DB instance identifier - proddb
------

Credentials Settings:

Master username - proddb

Master password         : proddb12345
Confirm Master password : proddb12345

Remove Enable storage autoscaling

Existing VPC security groups {select our created security group}
---

Additional configuration

Initial database name - proddb

remove backup
remove encryption
remove maintaince

----Create Database 

=======================================================================
RDS

create 2

Then go to Database

standard create

engine option: Mysql
engine version: 8.0.35 [enable RDS]

----
Templates: Free tier

Settings:
DB instance identifier - drproddb
------

Credentials Settings:

Master username - drproddb

Master password         : drproddb12345
Confirm Master password : drproddb12345

Remove Enable storage autoscaling

Existing VPC security groups {select our created security group}
---

Additional configuration

Initial database name - drproddb

remove backup
remove encryption
remove maintaince

----Create Database 

===================================================================
Go to IAM

create 1 Role

USEcase >> EC2 /next

Permissions policies >> AdministratorAccess /next

Role Name: viknesh-AWS-Project

DONE 
======================================================================
Now go to EC2

go to Ec2 Create 2 Server --- dr & production

Amazon Machine Image (AMI) - kernel 5.10

Instance type - any

Advanced details  Info 
IAM instance profile - [Viknesh-AWS-Project]
------------------------------
#!/bin/bash
yum install httpd php-mysql -y
amazon-linux-extras install -y php7.3
cd /var/www/html
echo "healthy" > healthy.html
wget https://wordpress.org/latest.tar.gz
tar -xzf latest.tar.gz
cp -r wordpress/* /var/www/html/
rm -rf wordpress
rm -rf latest.tar.gz
chmod -R 755 wp-content
chown -R apache:apache wp-content
wget https://s3.amazonaws.com/bucketforwordpresslab-donotdelete/htaccess.txt
mv htaccess.txt .htaccess
chkconfig httpd on
service httpd start


Create
==============================================

after creating the 2 server first copy the ip of production server and hit

page opens....


Database Name: [RDS username]
Username     : [RDS Username]
Password     : [RDS Password]
Database Host: [RDS end point]
--------------------------------------

Database Name: proddb
Username     : proddb
Password     : proddb12345
Database Host: proddb1.cjciawewioy1.ap-southeast-1.rds.amazonaws.com

Give Next:

then go to producton ec2 server

$ sudo -i
# systemctl enable httpd
# systemctl start httpd
# systemctl status httpd

● httpd.service - The Apache HTTP Server
   Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)
  Drop-In: /usr/lib/systemd/system/httpd.service.d
           └─php-fpm.conf
   Active: active (running) since Tue 2024-09-10 09:52:06 UTC; 34min ago
     Docs: man:httpd.service(8)
 Main PID: 3511 (httpd)
   Status: "Total requests: 41; Idle/Busy workers 100/0;Requests/sec: 0.0198; Bytes served/sec:  90 B/sec"
=====================================================================================
next
go to midlewar path
# cd /var/www/html

copy the content in worldpress : Configuration rules for wp-config.php:

# vi wp-config.php
 copy & paste the content WP in the file and save!!!!
=============================================================

----NOTE_____Do the Same in disaster recovery Server 
_______________________________________________________

Then Give (Run installation)

next page opens NOTE --do this for 2 servers

Welcome

----------------------
Site Title : production-site
Username   : proddb
Password   : proddb12345
Confirm Password : give tick
----------------------
Site Title : disaster-recovery-site
Username   : drproddb
Password   : drproddb12345
Confirm Password : give tick
----------------------------
Site Title       : production-site
Username         : [RDS Username]
Password         : [RDS password]
Confirm Password : give tick
Your Email       :

Give---install
=======================================

Success!
WordPress has been installed. Thank you, and enjoy!

Username	proddb
Password	
Your chosen password.

Log In
=====================================
click login

Username or Email Address: [RDS Username]

Password: [RDS password]

do it for production server & disaster R server

page opens "Welcome to WordPress!"

=========================================================================
click the home button >> select the edit option
page opens... GET START

edit your title SAVE
----

----
and refresh the page 

>>>chages came!!!

do this for the both server!!!

==========================================================================

next go to load balancer create lb for 2 servers


***Create Classic Load Balancer 

>>Basic configuration
Load balancer name : [production-lb / disaster-lb]

>>Availability Zones : give the 3 Zones
Security groups    : our created sg gr

>>Health checks 

Ping path - /healthy.html

remove : {Enable cross-zone load balancing & Enable connection draining}
create load balancer
==========================================================================
create S3 bucket
==========================================================================
next attach the loadbalancer to the respective site....!!!!!

copy the DNS of Load balancer and hit

PRODUCTION-LB-93647483.ap-southeast-1.elb.amazonaws.com

opens 

=========================================================================
next go to R53

>>Create Record ____Production Server____

Quick create record

Record name
[subdomain-non]
-------
|Alias|

Route traffic to
----------------------------------------------------
[Alias to Application and Classic Load Balancer]
[Asia Pacific (Singapore)]
----------------------------------------------------
Choose load balancer - [Production load balancer]


**Create records**
==========================================================================

>>Create Record ____Production Server____

Quick create record

Record name
[subdomain-non] give - buy
-------
|Alias|

Route traffic to
----------------------------------------------------
[Alias to Application and Classic Load Balancer]
[Asia Pacific (Singapore)]
----------------------------------------------------
Choose load balancer - [Production load balancer]


**Create records**
===============================================================================

NOW hit the domain name in the server....

[viknesh.xyz]       : production-site
[buy.viknesh.xyz]   : disaster-recovery-site

site opens but site still in '"Not secure"'

for the process:
=================================================================================

Go to EC2 > Load balancers > PRODUCTION-LB > Manage > listeners

Listener protocol - HTTPS

Port              - 443
------
Instance protocol - HTTP

Instance port     - 80
------
Default SSL/TLS certificate  -(ACM certificate) ACM: ********

{Save changes}
__"Do this for Production server & Disaster R server"__

=======================================================================

and then refresh the servers Not secure will be changed!!!!

=======================================================================
after then create 2 S3 bucket ACL Enable

disaster-recovery-site-bucket & production-site-bucket

Now we are going to reflect the content of production site on the disaster recovery side..
---------------------------------------------------------------------------------------------
*/2 * * * * aws s3 sync --delete /var/www/html/wp-content/uploads s3://bucket_1-name
*/2 * * * * aws s3 sync --delete /var/www/html/ s3://bucket_2-name
-----------------------------------------------------------------------------------------------

Now go to production site and 
change to home path cd

#crontab -e

editer opens now paste the content as follows

*/2 * * * * aws s3 sync --delete /var/www/html/wp-content/uploads s3://production-site-bucket
*/2 * * * * aws s3 sync --delete /var/www/html/ s3://disaster-recovery-site-bucket

save and close

===============================================================================
after then
**********************************************************************************************
no crontab for root - using an empty one
crontab: installing new crontab

now type the comment  
# crontab -l


# crontab -l
*/2 * * * * aws s3 sync --delete /var/www/html/wp-content/uploads s3://production-site-bucket
*/2 * * * * aws s3 sync --delete /var/www/html/ s3://disaster-recovery-site-bucket
You have mail in /var/spool/mail/root
**********************************************************************************************
you can reflect the content which we put inside the crontab file...

==========================================================================================
Now go to S3 bucket and open the disaster-recovery-site-bucket and refresh you can see the cont their

=======================================
now open the disaster site server

change to home path #cd

-----------------------------------------------------------------------------------------------
*/2 * * * *  aws s3 sync --delete  s3://bucket_1-name /var/www/html/wp-content/uploads
*/2 * * * *  aws s3 sync --delete  s3://bucket_2-name /var/www/html/
-----------------------------------------------------------------------------------------------

Now go to disaster site and 
change to home path cd

#crontab -e

editer opens now paste the content as follows


*/2 * * * *  aws s3 sync --delete  s3://production-site-bucket /var/www/html/wp-content/uploads
*/2 * * * *  aws s3 sync --delete  s3://disaster-recovery-site-bucket /var/www/html/

save and close!!

=============================================================================================
after then
**********************************************************************************************
no crontab for root - using an empty one
crontab: installing new crontab

now type the comment  
# crontab -l

]# crontab -l

*/2 * * * *  aws s3 sync --delete  s3://production-site-bucket /var/www/html/wp-content/uploads
*/2 * * * *  aws s3 sync --delete  s3://disaster-recovery-site-bucket /var/www/html/
**********************************************************************************************
display like this you can reflect the content which we put inside the crontab file..
================================================================================================
Now go to S3 bucket and open the production-site-bucket and refresh you can't see the cont their
because it's hidden.
========================================================================================

now deleting process:

1. RDS
2. Go to R53 delete A & CNAME
3. Hosted Zone delete (R53)
4. IAM - ROLE
5. S3 Buckets
6. Load Balancer 
7. Server EC2
_________________________________________________END_______________________________________________

